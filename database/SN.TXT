
Laravel Schema

php artisan make:migration create_users_money_logs_table --create=users_money_logs

php artisan make:migration add_votes_to_users_table --table=users

php artisan make:migration create_notice_table --create=notice


php artisan make:migration create_oos_update_img_table --create=oos_update_img_table
php artisan make:migration create_order_inspection_image_table --create=order_inspection_image


php artisan make:migration create_mail_order_table --create=mail_order;
php artisan make:migration create_mail_conf_table --create=mail_conf;
php artisan make:migration create_mail_users_table --create=mail_users
php artisan make:migration create_mail_users_count_table --create=mail_users_count


// 创建指定数据表
 Schema::create('table', function($table)
{
  $table->increments('id');
});
// 指定一个连接
 Schema::connection('foo')->create('table', function($table){});
// 通过给定的名称来重命名数据表
 Schema::rename($from, $to);
// 移除指定数据表
 Schema::drop('table');
// 当数据表存在时, 将指定数据表移除
 Schema::dropIfExists('table');
// 判断数据表是否存在
 Schema::hasTable('table');
// 判断数据表是否有该列
 Schema::hasColumn('table', 'column');
// 更新一个已存在的数据表
 Schema::table('table', function($table){});
// 重命名数据表的列
$table->renameColumn('from', 'to');
// 移除指定的数据表列
$table->dropColumn(string|array);
// 指定数据表使用的存储引擎
$table->engine = 'InnoDB';
// 字段顺序，只能在 MySQL 中才能用
$table->string('name')->after('email');
              
索引
$table->string('column')->unique();
$table->primary('column');
// 创建一个双主键
$table->primary(array('first', 'last'));
$table->unique('column');
$table->unique('column', 'key_name');
// 创建一个双唯一性索引
$table->unique(array('first', 'last'));
$table->unique(array('first', 'last'), 'key_name');
$table->index('column');
$table->index('column', 'key_name');
// 创建一个双索引
$table->index(array('first', 'last'));
$table->index(array('first', 'last'), 'key_name');
$table->dropPrimary(array('column'));
$table->dropPrimary('table_column_primary');
$table->dropUnique(array('column'));
$table->dropUnique('table_column_unique');
$table->dropIndex(array('column'));
$table->dropIndex('table_column_index');
              
外键
$table->foreign('user_id')->references('id')->on('users');
$table->foreign('user_id')->references('id')->on('users')->onDelete('cascade'|'restrict'|'set null'|'no action');
$table->foreign('user_id')->references('id')->on('users')->onUpdate('cascade'|'restrict'|'set null'|'no action');
$table->dropForeign(array('user_id'));
$table->dropForeign('posts_user_id_foreign');
              
字段类型
// 自增
$table->increments('id');
$table->bigIncrements('id');

// 数字
$table->integer('votes');
$table->tinyInteger('votes');
$table->smallInteger('votes');
$table->mediumInteger('votes');
$table->bigInteger('votes');
$table->float('amount');
$table->double('column', 15, 8);
$table->decimal('amount', 5, 2);

// 字符串和文本
$table->char('name', 4);
$table->string('email');
$table->string('name', 100);
$table->text('description');
$table->mediumText('description');
$table->longText('description');

// 日期和时间
$table->date('created_at');
$table->dateTime('created_at');
$table->time('sunrise');
$table->timestamp('added_on');
// Adds created_at and updated_at columns
 // 添加 created_at 和 updated_at 行
$table->timestamps();
$table->nullableTimestamps();

// 其它类型
$table->binary('data');
$table->boolean('confirmed');
// 为软删除添加 deleted_at 字段
$table->softDeletes();
$table->enum('choices', array('foo', 'bar'));
// 添加 remember_token 为 VARCHAR(100) NULL
$table->rememberToken();
// 添加整型的 parent_id 和字符串类型的 parent_type
$table->morphs('parent');
->nullable()
->default($value)
->unsigned()


常用约束
->first() 	将该列置为表中第一个列 (仅适用于 MySQL)
->after(‘column') 	将该列置于另一个列之后 (仅适用于 MySQL)
->nullable() 	允许该列的值为 NULL
->default($value) 	指定列的默认值
->unsigned() 	设置 integer 列为 UNSIGNED













JOB  调度频率选项
->cron('* * * * *');            按自定义 cron 计划运行任务
->everySecond();                每秒运行一次任务
->everyTwoSeconds();            每两秒运行一次任务
->everyFiveSeconds();           每五秒运行一次任务
->everyTenSeconds();            每十秒运行一次任务
->everyFifteenSeconds();	每 15 秒运行一次任务
->everyTwentySeconds();         每 20 秒运行一次任务
->everyThirtySeconds();         每 30 秒运行一次任务
->everyMinute();                每分钟运行一次任务
->everyTwoMinutes();            每两分钟运行一次任务
->everyThreeMinutes();          每三分钟运行一次任务
->everyFourMinutes();           每四分钟运行一次任务
->everyFiveMinutes();           每五分钟运行一次任务
->everyTenMinutes();            每十分钟运行一次任务
->everyFifteenMinutes();	每 15 分钟运行一次任务
->everyThirtyMinutes();         每 30 分钟运行一次任务
->hourly();                     每小时运行一次任务
->hourlyAt(17);                 每小时第十七分钟时执行一次任务
->everyOddHour($minutes = 0);	每奇数小时运行一次任务
->everyTwoHours($minutes = 0);	每两小时运行一次任务
->everyThreeHours($minutes = 0);	每三小时运行一次任务
->everyFourHours($minutes = 0);	每四小时运行一次任务
->everySixHours($minutes = 0);	每六小时运行一次任务
->daily();                      每天 00:00 执行一次任务
->dailyAt('13:00');             每天 13：00 运行任务
->twiceDaily(1, 13);            每天在 1：00 和 13：00 运行任务
->twiceDailyAt(1, 13, 15);	每天在 1：15 和 13：15 运行任务
->weekly();                     每周日00：00运行任务
->weeklyOn(1, '8:00');          每周一 8：00 运行任务
->monthly();                    每月第一天 00：00 运行任务
->monthlyOn(4, '15:00');	每月第四天 15：00 运行任务
->twiceMonthly(1, 16, '13:00');	每月第一天和第十六天的 13：00 运行任务
->lastDayOfMonth('15:00');	每月的最后一天 15：00 运行任务
->quarterly();                  每个季度的第一天 00：00 运行任务
->quarterlyOn(4, '14:00');	每季度 4 日 14：00 运行任务
->yearly();                     每年的第一天 00：00 运行任务
->yearlyOn(6, 1, '17:00');	每年1月17日00：<>运行任务
->timezone('America/New_York');	设置任务的时区
->weekdays();                   限制任务在工作日执行
->weekends();                   限制任务在周末执行
->sundays();                    限制任务在周日执行
->mondays();                    限制任务在周一执行
->tuesdays();                   限制任务在周二执行
->wednesdays();                 限制任务在周三执行
->thursdays();                  限制任务在周四执行
->fridays();                    限制任务在周五执行
->saturdays();                  限制任务在周六执行
->days(array|mixed);            限制任务在每周的指定日期执行
->between($startTime, $endTime);	限制任务在 $startTime 和 $endTime 区间执行
->unlessBetween($startTime, $endTime);	限制任务不在 $startTime 和 $endTime 区间执行
->when(Closure);                限制任务在闭包返回为真时执行
->environments($env);           限制任务在特定环境中执行